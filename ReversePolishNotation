import java.util.Scanner;

class StackNode {
	public StackNode(double data, StackNode underneath) {
		this.data = data;
		this.underneath = underneath;
	}

	public StackNode underneath;
	public double data;
}

class ReversePolishNotation {
	public void into(double new_data) {
		StackNode new_node = new StackNode(new_data, top);
		top = new_node;
	}

	public double outof() {
		double top_data = top.data;
		top = top.underneath;
		return top_data;
	}

	public ReversePolishNotation(String command) {
		top = null;
		this.command = command;
	}

	public double calculate() {
		double a, b;
		int j= 0;

		j = convertCharacterOperator(j);

		double val = outof();

		if (top != null) {
			throw new IllegalArgumentException();
		}

		return val;
	}

	private int convertCharacterOperator(int j) {
		double a;
		double b;
		for (int i = 0; i < command.length(); i++) {
			// if it's a digit
			if (Character.isDigit(command.charAt(i))) {//if the character is a digit
				double number;
				// get a string of the number
				String numberString = "";
				for (j = 0; (j < 100)
						&& (Character.isDigit(command.charAt(i)) || (command.charAt(i) == '.')); j++, i++) {
					numberString = numberString + String.valueOf(command.charAt(i));}
				// convert to double and add to the stack
				number = Double.parseDouble(numberString);
				into(number);
			}
			else {
				assignOperator(i);
			}
		}
		return j;
	}

	private void assignOperator(int i) {
		double a;
		double b;
		b = outof();
		a = outof();
		if (command.charAt(i) == '+') {
			into(a + b);
		} else if (command.charAt(i) == '-') {
			into(a - b);
		} else if (command.charAt(i) == '*') {
			into(a * b);
		} else if (command.charAt(i) == '/') {
			into(a / b);
		} else if (command.charAt(i) == '^') {
			into(Math.pow(a, b));
		} else if (command.charAt(i) != ' ') {
			throw new IllegalArgumentException();
		}
	}

	private String command;
	private StackNode top;

	/* main method */
	public static void main(String args[]) {
		while (true) {
			Scanner in = new Scanner(System.in);
			System.out.println("Enter RPN expression or \"quit\".");
			String userInput = in.nextLine();
			if (userInput.equals("quit")) {
				break;
			} else {
				ReversePolishNotation calc = new ReversePolishNotation(userInput);
				System.out.printf("Answer is %f\n", calc.calculate());
			}
		}
	}
}
